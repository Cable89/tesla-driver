
Tonegenerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  00000498  0000052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000498  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800202  00800202  0000062e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000d93  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00000dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000008fb  00000000  00000000  00000ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003d4  00000000  00000000  000017dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000526  00000000  00000000  00001bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  000020d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000368  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004be  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  00002b1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	ADCSRA |= (1 << ADSC);
}

uint8_t ADC_done()
{
	if (ADCSRA & (1 << ADIF)){
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
		
		ADCSRA = ADCSRA; // clear interrupt flag
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
		
		results[ADMUX & 0x0F] = ADC;
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
		return (ADMUX & 0x0F);
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	}	else {
		return 0;
	}
}
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 34       	cpi	r26, 0x43	; 67
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 30 02 	call	0x460	; 0x460 <main>
  9e:	0c 94 4a 02 	jmp	0x494	; 0x494 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <driver_init>:
	// Enable timer 1
	//TIMSK1 |= ( 1 << OCIE1A ) | ( 1 << OCIE1B );
	//TIMSK1 |= ( 1 << TOIE1 );
	
	// Enable fast PWM with ICR1 ( 14)
	TCCR1A |= ( 1 << WGM11 );
  a6:	e0 e8       	ldi	r30, 0x80	; 128
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
	TCCR1B |= ( 1 << WGM12 ) | ( 1 << WGM13 );
  b0:	a1 e8       	ldi	r26, 0x81	; 129
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	8c 91       	ld	r24, X
  b6:	88 61       	ori	r24, 0x18	; 24
  b8:	8c 93       	st	X, r24
	
	// Clock from pure clock
	TCCR1B |= ( 1 << CS10 );
  ba:	8c 91       	ld	r24, X
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	8c 93       	st	X, r24
	
	// Set low on match, high on reset
	TCCR1A |= ( 1 << COM1A1 ) | ( 1 << COM1B1 );
  c0:	80 81       	ld	r24, Z
  c2:	80 6a       	ori	r24, 0xA0	; 160
  c4:	80 83       	st	Z, r24
	
	// Count to 4, so we can set 75% and 25% duty
	ICR1L = 3;
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	80 93 86 00 	sts	0x0086, r24
  cc:	08 95       	ret

000000ce <driver3_setHi>:
void driver1_setHi() {
	OCR0A = 254;
}

void driver3_setHi() {
	OCR1A = 2;
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25
  d6:	80 93 88 00 	sts	0x0088, r24
	PORTD |= (1 << PD3);
  da:	5b 9a       	sbi	0x0b, 3	; 11
  dc:	08 95       	ret

000000de <driver3_setLo>:
}

void driver3_setLo() {
	OCR1A = 0;
  de:	10 92 89 00 	sts	0x0089, r1
  e2:	10 92 88 00 	sts	0x0088, r1
	PORTD &= ~(1 << PD3);
  e6:	5b 98       	cbi	0x0b, 3	; 11
  e8:	08 95       	ret

000000ea <driver4_setHi>:
	OCR1A = (OCR1A ^ 2) & 0x03 ;
	PIND = (1 << PD3);
}

void driver4_setHi() {
	OCR1B = 2;
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 8b 00 	sts	0x008B, r25
  f2:	80 93 8a 00 	sts	0x008A, r24
  f6:	08 95       	ret

000000f8 <driver4_setLo>:
}

void driver4_setLo() {
	OCR1B = 0;
  f8:	10 92 8b 00 	sts	0x008B, r1
  fc:	10 92 8a 00 	sts	0x008A, r1
 100:	08 95       	ret

00000102 <uart_init>:

void uart_init() 
{
	
	// Set UART mode
	UCSR0C &= ~( ( 1 << UMSEL01 ) | ( 1 << UMSEL00 ) );
 102:	a2 ec       	ldi	r26, 0xC2	; 194
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	8c 91       	ld	r24, X
 108:	8f 73       	andi	r24, 0x3F	; 63
 10a:	8c 93       	st	X, r24
	
	// Enable U(S)ART
	UCSR0B |= ( 1 << RXEN0 )|(1 << TXEN0);
 10c:	e1 ec       	ldi	r30, 0xC1	; 193
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	88 61       	ori	r24, 0x18	; 24
 114:	80 83       	st	Z, r24
	
	// Set symbol size ( 8 bit )
	UCSR0C |= ( 1 << UCSZ01 ) | ( 1 << UCSZ00 );
 116:	8c 91       	ld	r24, X
 118:	86 60       	ori	r24, 0x06	; 6
 11a:	8c 93       	st	X, r24
	
	// Set baud rate (defined in defines.h)
	UBRR0 = UBRR_VALUE;
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 c5 00 	sts	0x00C5, r25
 124:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable RX interrupts
	UCSR0B |= ( 1 << RXCIE0 );
 128:	80 81       	ld	r24, Z
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <midi_init>:

void midi_init() 
{
	// Use driver 3 and 4
	
	channels[0].enabled = true;
 130:	31 e0       	ldi	r19, 0x01	; 1
 132:	30 93 37 02 	sts	0x0237, r19
	channels[0].duty = 10;
 136:	2a e0       	ldi	r18, 0x0A	; 10
 138:	20 93 3c 02 	sts	0x023C, r18
	channels[0].outputHi = &driver3_setHi;
 13c:	87 e6       	ldi	r24, 0x67	; 103
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	90 93 39 02 	sts	0x0239, r25
 144:	80 93 38 02 	sts	0x0238, r24
	channels[0].outputLo = &driver3_setLo;
 148:	8f e6       	ldi	r24, 0x6F	; 111
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 3b 02 	sts	0x023B, r25
 150:	80 93 3a 02 	sts	0x023A, r24
	
	channels[1].enabled = true;
 154:	30 93 3d 02 	sts	0x023D, r19
	channels[1].duty = 10;
 158:	20 93 42 02 	sts	0x0242, r18
	channels[1].outputHi = &driver4_setHi;
 15c:	85 e7       	ldi	r24, 0x75	; 117
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 3f 02 	sts	0x023F, r25
 164:	80 93 3e 02 	sts	0x023E, r24
	channels[1].outputLo = &driver4_setLo;
 168:	8c e7       	ldi	r24, 0x7C	; 124
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 41 02 	sts	0x0241, r25
 170:	80 93 40 02 	sts	0x0240, r24
 174:	08 95       	ret

00000176 <note_create>:
	newNote.age = 0;
	newNote.releaseTime = 0;
	newNote.midi_value = notenum;
	newNote.velocity = vel;
	newNote.counter = 0;
	newNote.period = midi_period[notenum];
 176:	a6 2f       	mov	r26, r22
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	aa 0f       	add	r26, r26
 17c:	bb 1f       	adc	r27, r27
 17e:	af 5f       	subi	r26, 0xFF	; 255
 180:	be 4f       	sbci	r27, 0xFE	; 254
 182:	2d 91       	ld	r18, X+
 184:	3c 91       	ld	r19, X
			}
		}
	}
	*/
	
	if( iLastNote == 1 ) {
 186:	90 91 02 02 	lds	r25, 0x0202
 18a:	91 30       	cpi	r25, 0x01	; 1
 18c:	f1 f4       	brne	.+60     	; 0x1ca <note_create+0x54>
		notes[chan][0] = newNote;
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	fc 01       	movw	r30, r24
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	8e 0f       	add	r24, r30
 198:	9f 1f       	adc	r25, r31
 19a:	fc 01       	movw	r30, r24
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	e9 5f       	subi	r30, 0xF9	; 249
 1aa:	fd 4f       	sbci	r31, 0xFD	; 253
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 83       	st	Z, r24
 1b0:	81 83       	std	Z+1, r24	; 0x01
 1b2:	13 82       	std	Z+3, r1	; 0x03
 1b4:	12 82       	std	Z+2, r1	; 0x02
 1b6:	14 82       	std	Z+4, r1	; 0x04
 1b8:	65 83       	std	Z+5, r22	; 0x05
 1ba:	46 83       	std	Z+6, r20	; 0x06
 1bc:	10 86       	std	Z+8, r1	; 0x08
 1be:	17 82       	std	Z+7, r1	; 0x07
 1c0:	32 87       	std	Z+10, r19	; 0x0a
 1c2:	21 87       	std	Z+9, r18	; 0x09
		iLastNote = 0;
 1c4:	10 92 02 02 	sts	0x0202, r1
 1c8:	08 95       	ret
	}
	else {
		notes[chan][1] = newNote;
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	fc 01       	movw	r30, r24
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	8e 0f       	add	r24, r30
 1d4:	9f 1f       	adc	r25, r31
 1d6:	fc 01       	movw	r30, r24
 1d8:	ee 0f       	add	r30, r30
 1da:	ff 1f       	adc	r31, r31
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	ed 5e       	subi	r30, 0xED	; 237
 1e6:	fd 4f       	sbci	r31, 0xFD	; 253
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 83       	st	Z, r24
 1ec:	81 83       	std	Z+1, r24	; 0x01
 1ee:	13 82       	std	Z+3, r1	; 0x03
 1f0:	12 82       	std	Z+2, r1	; 0x02
 1f2:	14 82       	std	Z+4, r1	; 0x04
 1f4:	65 83       	std	Z+5, r22	; 0x05
 1f6:	46 83       	std	Z+6, r20	; 0x06
 1f8:	10 86       	std	Z+8, r1	; 0x08
 1fa:	17 82       	std	Z+7, r1	; 0x07
 1fc:	32 87       	std	Z+10, r19	; 0x0a
 1fe:	21 87       	std	Z+9, r18	; 0x09
		iLastNote = 1;
 200:	80 93 02 02 	sts	0x0202, r24
 204:	08 95       	ret

00000206 <note_release>:
	
	// Set the new note!
	//notes[chan][iEldestNoteNum] = newNote;
}

void note_release( uint8_t chan, uint8_t notenum, uint8_t vel ) {
 206:	20 91 02 02 	lds	r18, 0x0202
	for( uint8_t i = 0; i < MIDI_NOTE_NUM; ++i ) {
		if( notes[chan][i].midi_value == notenum ) {
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	fc 01       	movw	r30, r24
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	e8 0f       	add	r30, r24
 214:	f9 1f       	adc	r31, r25
 216:	ee 0f       	add	r30, r30
 218:	ff 1f       	adc	r31, r31
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	ee 0f       	add	r30, r30
 220:	ff 1f       	adc	r31, r31
 222:	e9 5f       	subi	r30, 0xF9	; 249
 224:	fd 4f       	sbci	r31, 0xFD	; 253
 226:	35 81       	ldd	r19, Z+5	; 0x05
 228:	36 13       	cpse	r19, r22
 22a:	12 c0       	rjmp	.+36     	; 0x250 <note_release+0x4a>
			notes[chan][i].depressed = false;
 22c:	fc 01       	movw	r30, r24
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	e8 0f       	add	r30, r24
 234:	f9 1f       	adc	r31, r25
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	e9 5f       	subi	r30, 0xF9	; 249
 244:	fd 4f       	sbci	r31, 0xFD	; 253
 246:	11 82       	std	Z+1, r1	; 0x01
			notes[chan][i].on = false; // HACKHACK: Should not be here later
 248:	10 82       	st	Z, r1
			notes[chan][i].releaseTime = notes[chan][i].age;
 24a:	22 81       	ldd	r18, Z+2	; 0x02
 24c:	24 83       	std	Z+4, r18	; 0x04
			
			iLastNote = 1 - i;
 24e:	21 e0       	ldi	r18, 0x01	; 1
	//notes[chan][iEldestNoteNum] = newNote;
}

void note_release( uint8_t chan, uint8_t notenum, uint8_t vel ) {
	for( uint8_t i = 0; i < MIDI_NOTE_NUM; ++i ) {
		if( notes[chan][i].midi_value == notenum ) {
 250:	fc 01       	movw	r30, r24
 252:	ee 0f       	add	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	e8 0f       	add	r30, r24
 258:	f9 1f       	adc	r31, r25
 25a:	ee 0f       	add	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	ee 0f       	add	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	e9 5f       	subi	r30, 0xF9	; 249
 268:	fd 4f       	sbci	r31, 0xFD	; 253
 26a:	31 89       	ldd	r19, Z+17	; 0x11
 26c:	36 13       	cpse	r19, r22
 26e:	13 c0       	rjmp	.+38     	; 0x296 <note_release+0x90>
			notes[chan][i].depressed = false;
 270:	fc 01       	movw	r30, r24
 272:	ee 0f       	add	r30, r30
 274:	ff 1f       	adc	r31, r31
 276:	8e 0f       	add	r24, r30
 278:	9f 1f       	adc	r25, r31
 27a:	fc 01       	movw	r30, r24
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	ee 0f       	add	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	e9 5f       	subi	r30, 0xF9	; 249
 28a:	fd 4f       	sbci	r31, 0xFD	; 253
 28c:	15 86       	std	Z+13, r1	; 0x0d
			notes[chan][i].on = false; // HACKHACK: Should not be here later
 28e:	14 86       	std	Z+12, r1	; 0x0c
			notes[chan][i].releaseTime = notes[chan][i].age;
 290:	86 85       	ldd	r24, Z+14	; 0x0e
 292:	80 8b       	std	Z+16, r24	; 0x10
			
			iLastNote = 1 - i;
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	20 93 02 02 	sts	0x0202, r18
 29a:	08 95       	ret

0000029c <midi_receive>:
	channels[1].outputHi = &driver4_setHi;
	channels[1].outputLo = &driver4_setLo;
}

void midi_receive( uint8_t msg ) {
	if ( MIDI_IS_NOTE_ON( msg ) ) {
 29c:	98 2f       	mov	r25, r24
 29e:	92 95       	swap	r25
 2a0:	9f 70       	andi	r25, 0x0F	; 15
 2a2:	99 30       	cpi	r25, 0x09	; 9
 2a4:	49 f4       	brne	.+18     	; 0x2b8 <midi_receive+0x1c>
		// Note on
		bRunningStatus = true;
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	90 93 06 02 	sts	0x0206, r25
		bRunningNoteOn = true;
 2ac:	90 93 00 01 	sts	0x0100, r25
		iRunningChannel = MIDI_CHANNEL( msg );
 2b0:	8f 70       	andi	r24, 0x0F	; 15
 2b2:	80 93 05 02 	sts	0x0205, r24
 2b6:	08 95       	ret
	}
	else if( MIDI_IS_NOTE_OFF( msg ) ) {
 2b8:	98 30       	cpi	r25, 0x08	; 8
 2ba:	49 f4       	brne	.+18     	; 0x2ce <midi_receive+0x32>
		// Note off handle
		bRunningStatus = true;
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	90 93 06 02 	sts	0x0206, r25
		bRunningNoteOn = false;
 2c2:	10 92 00 01 	sts	0x0100, r1
		iRunningChannel = MIDI_CHANNEL( msg );
 2c6:	8f 70       	andi	r24, 0x0F	; 15
 2c8:	80 93 05 02 	sts	0x0205, r24
 2cc:	08 95       	ret
	}
	else if( MIDI_IS_DATA( msg ) ) {
 2ce:	88 23       	and	r24, r24
 2d0:	4c f1       	brlt	.+82     	; 0x324 <midi_receive+0x88>
		if( !bAwaitingSecondByte ) {
 2d2:	90 91 04 02 	lds	r25, 0x0204
 2d6:	91 11       	cpse	r25, r1
 2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <midi_receive+0x4a>
			iFirstByte = msg;
 2da:	80 93 03 02 	sts	0x0203, r24
			bAwaitingSecondByte = true;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	80 93 04 02 	sts	0x0204, r24
 2e4:	08 95       	ret
		}
		else {
			bAwaitingSecondByte = false;
 2e6:	10 92 04 02 	sts	0x0204, r1
			
			if( bRunningNoteOn ) {
 2ea:	90 91 00 01 	lds	r25, 0x0100
 2ee:	99 23       	and	r25, r25
 2f0:	91 f0       	breq	.+36     	; 0x316 <midi_receive+0x7a>
				// Handle note on using iRunningChannel as channel, iFirstByte as notenum and msg as velocity
				// NOTE: If velocity == 0, handle as note off
				if( msg == 0 )
 2f2:	81 11       	cpse	r24, r1
 2f4:	08 c0       	rjmp	.+16     	; 0x306 <midi_receive+0x6a>
					note_release( iRunningChannel, iFirstByte, 127 );
 2f6:	4f e7       	ldi	r20, 0x7F	; 127
 2f8:	60 91 03 02 	lds	r22, 0x0203
 2fc:	80 91 05 02 	lds	r24, 0x0205
 300:	0e 94 03 01 	call	0x206	; 0x206 <note_release>
 304:	08 95       	ret
				else
					note_create( iRunningChannel, iFirstByte, msg );
 306:	48 2f       	mov	r20, r24
 308:	60 91 03 02 	lds	r22, 0x0203
 30c:	80 91 05 02 	lds	r24, 0x0205
 310:	0e 94 bb 00 	call	0x176	; 0x176 <note_create>
 314:	08 95       	ret
			}
			else {
				// Handle note off using iRunningChannel as channel, iFirstByte as notenum and msg as velocity
				note_release( iRunningChannel, iFirstByte, msg );
 316:	48 2f       	mov	r20, r24
 318:	60 91 03 02 	lds	r22, 0x0203
 31c:	80 91 05 02 	lds	r24, 0x0205
 320:	0e 94 03 01 	call	0x206	; 0x206 <note_release>
 324:	08 95       	ret

00000326 <__vector_18>:
	
}

// RX interrupt
ISR( USART_RX_vect )
{
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	ef 93       	push	r30
 346:	ff 93       	push	r31
	uint8_t res = UDR0;
 348:	80 91 c6 00 	lds	r24, 0x00C6
	//res ^= 0xff;
	//if( MIDI_IS_ACTIVE_SENSING( res ) )
	//if( MIDI_IS_NOTE_ON( res ) )
	//	PORTD ^= ( 1 << 3 );
	midi_receive( res );
 34c:	0e 94 4e 01 	call	0x29c	; 0x29c <midi_receive>
	//UDR0 = res;
}
 350:	ff 91       	pop	r31
 352:	ef 91       	pop	r30
 354:	bf 91       	pop	r27
 356:	af 91       	pop	r26
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	7f 91       	pop	r23
 35e:	6f 91       	pop	r22
 360:	5f 91       	pop	r21
 362:	4f 91       	pop	r20
 364:	3f 91       	pop	r19
 366:	2f 91       	pop	r18
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <note_update>:
	
}

uint8_t note_update( uint8_t chan_i, uint8_t note_i )
{
	struct note_t *note = &notes[chan_i][note_i];
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	fb 01       	movw	r30, r22
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	6e 0f       	add	r22, r30
 37e:	7f 1f       	adc	r23, r31
 380:	fb 01       	movw	r30, r22
 382:	ee 0f       	add	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	ee 0f       	add	r30, r30
 388:	ff 1f       	adc	r31, r31
 38a:	9c 01       	movw	r18, r24
 38c:	22 0f       	add	r18, r18
 38e:	33 1f       	adc	r19, r19
 390:	28 0f       	add	r18, r24
 392:	39 1f       	adc	r19, r25
 394:	22 0f       	add	r18, r18
 396:	33 1f       	adc	r19, r19
 398:	22 0f       	add	r18, r18
 39a:	33 1f       	adc	r19, r19
 39c:	22 0f       	add	r18, r18
 39e:	33 1f       	adc	r19, r19
 3a0:	e2 0f       	add	r30, r18
 3a2:	f3 1f       	adc	r31, r19
 3a4:	e9 5f       	subi	r30, 0xF9	; 249
 3a6:	fd 4f       	sbci	r31, 0xFD	; 253
	struct chan_t *chan = &channels[chan_i];
	
	uint8_t value = 0;
	if( note->on ){
 3a8:	20 81       	ld	r18, Z
 3aa:	22 23       	and	r18, r18
 3ac:	01 f1       	breq	.+64     	; 0x3ee <note_update+0x7c>
		note->counter++;
 3ae:	27 81       	ldd	r18, Z+7	; 0x07
 3b0:	30 85       	ldd	r19, Z+8	; 0x08
 3b2:	2f 5f       	subi	r18, 0xFF	; 255
 3b4:	3f 4f       	sbci	r19, 0xFF	; 255
 3b6:	30 87       	std	Z+8, r19	; 0x08
 3b8:	27 83       	std	Z+7, r18	; 0x07
}

uint8_t note_update( uint8_t chan_i, uint8_t note_i )
{
	struct note_t *note = &notes[chan_i][note_i];
	struct chan_t *chan = &channels[chan_i];
 3ba:	dc 01       	movw	r26, r24
 3bc:	aa 0f       	add	r26, r26
 3be:	bb 1f       	adc	r27, r27
 3c0:	8a 0f       	add	r24, r26
 3c2:	9b 1f       	adc	r25, r27
 3c4:	dc 01       	movw	r26, r24
 3c6:	aa 0f       	add	r26, r26
 3c8:	bb 1f       	adc	r27, r27
	
	uint8_t value = 0;
	if( note->on ){
		note->counter++;
		if (note->counter < chan->duty){ //((note->level * chan->duty) / MIDI_LEVEL_MAX){
 3ca:	a9 5c       	subi	r26, 0xC9	; 201
 3cc:	bd 4f       	sbci	r27, 0xFD	; 253
 3ce:	15 96       	adiw	r26, 0x05	; 5
 3d0:	4c 91       	ld	r20, X
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	24 17       	cp	r18, r20
 3d8:	35 07       	cpc	r19, r21
 3da:	08 f0       	brcs	.+2      	; 0x3de <note_update+0x6c>
 3dc:	80 e0       	ldi	r24, 0x00	; 0
			value = 1;
		}
		
		if (note->counter > note->period){
 3de:	41 85       	ldd	r20, Z+9	; 0x09
 3e0:	52 85       	ldd	r21, Z+10	; 0x0a
 3e2:	42 17       	cp	r20, r18
 3e4:	53 07       	cpc	r21, r19
 3e6:	20 f4       	brcc	.+8      	; 0x3f0 <note_update+0x7e>
			note->counter = 0;
 3e8:	10 86       	std	Z+8, r1	; 0x08
 3ea:	17 82       	std	Z+7, r1	; 0x07
 3ec:	08 95       	ret
uint8_t note_update( uint8_t chan_i, uint8_t note_i )
{
	struct note_t *note = &notes[chan_i][note_i];
	struct chan_t *chan = &channels[chan_i];
	
	uint8_t value = 0;
 3ee:	80 e0       	ldi	r24, 0x00	; 0
		if (note->counter > note->period){
			note->counter = 0;
		}	
	}
	return value;
}
 3f0:	08 95       	ret

000003f2 <midi_update>:
	// Hurr
	notes[chan][noteId].on = false;
}

void midi_update()
{
 3f2:	cf 93       	push	r28
	uint8_t value;
	//called every 10 us.
	for (uint8_t chan_i = 0; chan_i < MIDI_CHAN_NUM; chan_i++)
	{
		if ( channels[chan_i].enabled ){
 3f4:	80 91 37 02 	lds	r24, 0x0237
 3f8:	88 23       	and	r24, r24
 3fa:	b1 f0       	breq	.+44     	; 0x428 <midi_update+0x36>
			
			value = 0;
			for (uint8_t note_i = 0; note_i < MIDI_NOTE_NUM; note_i++){
				value ^= note_update(chan_i,note_i);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 b9 01 	call	0x372	; 0x372 <note_update>
 404:	c8 2f       	mov	r28, r24
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 b9 01 	call	0x372	; 0x372 <note_update>
			}
		
			if( value ){
 40e:	c8 13       	cpse	r28, r24
 410:	06 c0       	rjmp	.+12     	; 0x41e <midi_update+0x2c>
				channels[chan_i].outputHi();
			}else{
				channels[chan_i].outputLo();
 412:	e0 91 3a 02 	lds	r30, 0x023A
 416:	f0 91 3b 02 	lds	r31, 0x023B
 41a:	09 95       	icall
 41c:	05 c0       	rjmp	.+10     	; 0x428 <midi_update+0x36>
			for (uint8_t note_i = 0; note_i < MIDI_NOTE_NUM; note_i++){
				value ^= note_update(chan_i,note_i);
			}
		
			if( value ){
				channels[chan_i].outputHi();
 41e:	e0 91 38 02 	lds	r30, 0x0238
 422:	f0 91 39 02 	lds	r31, 0x0239
 426:	09 95       	icall
{
	uint8_t value;
	//called every 10 us.
	for (uint8_t chan_i = 0; chan_i < MIDI_CHAN_NUM; chan_i++)
	{
		if ( channels[chan_i].enabled ){
 428:	80 91 3d 02 	lds	r24, 0x023D
 42c:	88 23       	and	r24, r24
 42e:	b1 f0       	breq	.+44     	; 0x45c <midi_update+0x6a>
			
			value = 0;
			for (uint8_t note_i = 0; note_i < MIDI_NOTE_NUM; note_i++){
				value ^= note_update(chan_i,note_i);
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 b9 01 	call	0x372	; 0x372 <note_update>
 438:	c8 2f       	mov	r28, r24
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 b9 01 	call	0x372	; 0x372 <note_update>
			}
		
			if( value ){
 442:	8c 17       	cp	r24, r28
 444:	31 f0       	breq	.+12     	; 0x452 <midi_update+0x60>
				channels[chan_i].outputHi();
 446:	e0 91 3e 02 	lds	r30, 0x023E
 44a:	f0 91 3f 02 	lds	r31, 0x023F
 44e:	09 95       	icall
 450:	05 c0       	rjmp	.+10     	; 0x45c <midi_update+0x6a>
			}else{
				channels[chan_i].outputLo();
 452:	e0 91 40 02 	lds	r30, 0x0240
 456:	f0 91 41 02 	lds	r31, 0x0241
 45a:	09 95       	icall
			}
		}
	}
	
}
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <main>:


int main(void)
{
	// Set ports we use as output
	DDRD |= (1 << DDD6) | ( 1 << DDD3 );
 460:	8a b1       	in	r24, 0x0a	; 10
 462:	88 64       	ori	r24, 0x48	; 72
 464:	8a b9       	out	0x0a, r24	; 10
	DDRB |= ( 1 << DDB1 ) | ( 1 << DDB2 );
 466:	84 b1       	in	r24, 0x04	; 4
 468:	86 60       	ori	r24, 0x06	; 6
 46a:	84 b9       	out	0x04, r24	; 4
	// Init adc
	//ADC_init();
	//ADC_start_conversion(ADC_CHANNEL_0);
	
	// Init MIDI
	midi_init();
 46c:	0e 94 98 00 	call	0x130	; 0x130 <midi_init>
	
	// Init UART
	uart_init();
 470:	0e 94 81 00 	call	0x102	; 0x102 <uart_init>
	
	// Init driver
	driver_init();
 474:	0e 94 53 00 	call	0xa6	; 0xa6 <driver_init>
	
	//setup tone clock
	TCCR0A = (1 << WGM01);
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = ( 1 << CS00 );
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = 80;
 480:	80 e5       	ldi	r24, 0x50	; 80
 482:	87 bd       	out	0x27, r24	; 39
	
	// Enable interrupts
	sei();
 484:	78 94       	sei
		//driver3_toggle();
		//_delay_ms( 500. );
		//if ( ((int8_t)TCNT2) - time > 0){
		//	time += TONE_RESOLUTION;
		if (TIFR0 & (1 << OCF0A)){
			TIFR0 = (1 << OCF0A);
 486:	c2 e0       	ldi	r28, 0x02	; 2
		
		//driver3_toggle();
		//_delay_ms( 500. );
		//if ( ((int8_t)TCNT2) - time > 0){
		//	time += TONE_RESOLUTION;
		if (TIFR0 & (1 << OCF0A)){
 488:	a9 9b       	sbis	0x15, 1	; 21
 48a:	fe cf       	rjmp	.-4      	; 0x488 <main+0x28>
			TIFR0 = (1 << OCF0A);
 48c:	c5 bb       	out	0x15, r28	; 21
			
			//driver3_setHi();
			//driver3_setLo();
			//driver3_toggle();
			midi_update();
 48e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <midi_update>
 492:	fa cf       	rjmp	.-12     	; 0x488 <main+0x28>

00000494 <_exit>:
 494:	f8 94       	cli

00000496 <__stop_program>:
 496:	ff cf       	rjmp	.-2      	; 0x496 <__stop_program>
